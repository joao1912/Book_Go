generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  username     String        @unique
  password     String
  email        String        @unique
  telephone    String        @unique
  createdAt    DateTime      @default(now())
  updateAt     DateTime      @updatedAt
  comments     Comment[]
  favorites    Favorite[]
  finances     Finance[]
  reservations Reservation[]

  @@map("users")
}

model Book {
  id           String        @id @default(uuid())
  title        String
  price        Float
  synopsis     String
  publishedDate String  
  pageCount    Int
  image        String?
  createdAt    DateTime      @default(now())
  updateAt     DateTime      @updatedAt
  comments     Comment[]
  favorites    Favorite[]
  finances     Finance[]
  reservations Reservation[]
  stock        Stock[]
  author       Author[]      @relation("AuthorToBook")
  tag          Tag[]         @relation("BookToTag")

  @@map("books")
}

model Favorite {
  id         String   @id @default(uuid())
  fk_id_book String
  fk_id_user String
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt
  book       Book     @relation(fields: [fk_id_book], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [fk_id_user], references: [id], onDelete: Cascade)

  @@map("favorites")
}

model Comment {
  id         String   @id @default(uuid())
  comment    String
  fk_id_book String
  fk_id_user String
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt
  book       Book     @relation(fields: [fk_id_book], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [fk_id_user], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Reservation {
  id         String   @id @default(uuid())
  price      Float
  fk_id_book String
  fk_id_user String
  status     String
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt
  book       Book     @relation(fields: [fk_id_book], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [fk_id_user], references: [id], onDelete: Cascade)

  @@map("reservations")
}

model Finance {
  id         String   @id @default(uuid())
  payments   String
  total      Float
  fk_id_book String
  fk_id_user String
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt
  book       Book     @relation(fields: [fk_id_book], references: [id])
  user       User     @relation(fields: [fk_id_user], references: [id], onDelete: Cascade)

  @@map("finances")
}

model Register {
  id        String @id @default(uuid())
  email     String
  telephone String
  title     String
  author    String
  payment   String
  total     Float

  @@map("register")
}

model Stock {
  id         String   @id @default(uuid())
  quantity   Int
  fk_id_book String   @unique
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt
  book       Book     @relation(fields: [fk_id_book], references: [id], onDelete: Cascade)

  @@map("stock")
}

model Author {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
  book        Book[]   @relation("AuthorToBook")

  @@map("authors")
}

model Tag {
  id        String   @id @default(uuid())
  genre     String   @unique
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  book      Book[]   @relation("BookToTag")

  @@map("tags")
}
