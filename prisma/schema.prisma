generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  username String @unique

  password String

  email String @unique

  telephone String @unique

  createdAt DateTime @default(now())

  updateAt DateTime @updatedAt

  reservations Reservation?

  favorites Favorite[]

  comments Comment?

  finances Finance?

  @@map("users")
}

model Book {
  id String @id @default(uuid())

  title String

  price Float

  synopsis String

  createdAt DateTime @default(now())

  updateAt DateTime @updatedAt

  favorites Favorite[]

  comments Comment?

  reservations Reservation?

  finances Finance?

  stock Stock?

  tag Tag[]

  author Author[]

  @@map("books")
}

model Favorite {
  id String @id @default(uuid())

  fk_id_book String

  fk_id_user String

  createdAt DateTime @default(now())

  updateAt DateTime @updatedAt

  user User @relation(fields: [fk_id_user], references: [id], onDelete: Cascade)

  book Book @relation(fields: [fk_id_book], references: [id], onDelete: Cascade)

  @@map("favorites")
}

model Comment {
  id String @id @default(uuid())

  comment String

  fk_id_book String @unique

  fk_id_user String @unique

  createdAt DateTime @default(now())

  updateAt DateTime @updatedAt

  user User @relation(fields: [fk_id_user], references: [id], onDelete: Cascade)

  book Book @relation(fields: [fk_id_book], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Reservation {
  id String @id @default(uuid())

  price Float

  fk_id_book String @unique

  fk_id_user String @unique

  status String

  createdAt DateTime @default(now())

  updateAt DateTime @updatedAt

  user User @relation(fields: [fk_id_user], references: [id], onDelete: Cascade)

  book Book @relation(fields: [fk_id_book], references: [id], onDelete: Cascade)

  @@map("reservations")
}

model Finance {
  id String @id @default(uuid())

  payments String

  total Float

  fk_id_book String @unique

  fk_id_user String @unique

  createdAt DateTime @default(now())

  updateAt DateTime @updatedAt

  user User @relation(fields: [fk_id_user], references: [id])

  book Book @relation(fields: [fk_id_book], references: [id])

  @@map("finances")
}

model Stock {
  id String @id @default(uuid())

  quantity Int

  fk_id_book String @unique

  createdAt DateTime @default(now())

  updateAt DateTime @updatedAt

  book Book @relation(fields: [fk_id_book], references: [id])

  @@map("stock")
}

model Author {
  id String @id @default(uuid())

  name String @unique

  description String?

  book Book[]

  createdAt DateTime @default(now())

  updateAt DateTime @updatedAt

  @@map("authors")
}

model Tag {
  id String @id @default(uuid())

  genre String @unique

  book Book[]

  createdAt DateTime @default(now())

  updateAt DateTime @updatedAt

  @@map("tags")
}